<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSourceUser" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="name" value="userDataSourceUser" />
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.datasource.user.url}" />
		<property name="username" value="${jdbc.datasource.user.username}" />
		<property name="password" value="${jdbc.datasource.user.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 获取连接时最大等待时间，单位毫秒-->
		<property name="maxWait" value="60000" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="-1" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="15000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- spring整合mybatis配置 -->
	<!--３.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactoryUser" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSourceUser" />
		<!--配置mybatis全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations">
		 <list>
                <value>classpath:user/mapper/*.xml</value>
                <!--<value>classpath:jxgl/mapper/*.xml</value>-->
		 </list>
		</property>
		<!-- <property name="mapperLocations" value="classpath:user/mapper/*.xml" /> -->
		<!-- mybatis分页插件 pagehelper -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<!--使用下面的方式配置参数，一行配置一个 -->
						<value>
							helperDialect=mysql
							reasonable=true
							supportMethodsArguments=true
							params=count=countSql
							autoRuntimeDialect=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!--4.配置一个可以进行批量执行的sqlSession -->
	<bean id="sqlSessionTemplateUser" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryUser"></constructor-arg>
		<!-- <constructor-arg name="executorType" value="BATCH"></constructor-arg> -->
	</bean>

	<!--5.配置扫描Dao接口包,动态实现DAO接口,自动注入到spring容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入SqlSessionFactory -->
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplateUser" />
		<!-- 给出需要扫描的Dao接口 -->
		<property name="basePackage" value="org.show.user.dao" />
	</bean>

	<!--配置事务管理器(mybatis采用的是JDBC的事务管理器) -->
	<bean id="transactionManagerNameUser"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceUser"></property>
	</bean>

	<!--配置基于注解的声明式事务,默认使用注解来管理事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManagerNameUser" proxy-target-class="true"/>

</beans>
